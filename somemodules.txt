    # - name: Start Crond Service
    #   service:
    #     name: crond
    #     state: started
    #   become: yes

    # - name: Enable Crond Service at Boot
    #   service:
    #     name: crond
    #     enabled: yes
    #   become: yes

    # - name: Creates an entry like "@reboot starttomcat"
    #   ansible.builtin.cron:
    #     name: "a job for reboot"
    #     special_time: reboot
    #     job: "starttomcat"


    # - name: Update Your Inventory File
    #   community.general.ini_file:
    #     dest: /mnt/c/Users/kochf/Downloads/myscripts/hosts
    #     section: tomcat
    #     option: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
    #     #option: ec2_instance_ip
    #     #value: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
    #     allow_no_value: true


    # - name: assign a tag to the resource
    #   amazon.aws.ec2_tag:
    #     region:  eu-west-1
    #     resource: '{{ item.InstanceId }}'
    #     state: present
    #     tags:
    #       Env: provision
    #     filters:
    #       "Name": "startswith:tomcat"
    #   loop: '{{ ec2.instances }}'
    
    # - name: reboot
    #   become: yes
    #   ansible.builtin.reboot:

        # - name: Stop Tomcat (if running)
    #   shell: stoptomcat > /dev/null 2>&1
    #   ignore_errors: yes

    # - name: Remove existing Tomcat installation
    #   file:
    #     path: /opt/tomcat9
    #     state: absent
    #   ignore_errors: yes

    # fact_filters:
#   - "@tag_env = provision"

# Filters:
# tag:Env: provision

# exclude_filters:
# - tag:Env:
#   - 'provision'

# - name: Show all the hosts in the current play
    #   ansible.builtin.debug:
    #     msg: "{{ item }}"
    #   loop: "{{ ansible_play_batch }}"

    # - name: Display all variables/facts known for ec2
    #   ansible.builtin.debug:
    #     var: ec2
  

    # - name: Wait for SSH to become available
    #   wait_for:
    #     host: "{{ item }}" #"{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
    #     port: 22
    #     state: started 
    #   loop: "{{ansible_play_batch}}"


- name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: ./latesttom
        dest: /home/linvm
        owner: linvm
        group: linvm
        mode: '0644'

 # - name: Show all the hosts in the current play
    #   ansible.builtin.debug:
    #     msg: "{{ item }}"
    #   loop: "{{ ansible_play_batch }}"
    #   register: newinstance
    
    # - name: Gather information about a particular instance using ID
    #   amazon.aws.ec2_instance_info:
    #     filters:
    #       dns-name: newinstance.msg

    - name: assign a tag to the resource
    #   amazon.aws.ec2_tag:
    #     region:  us-east-1
    #     resource: '{{ item.InstanceId }}'
    #     state: present
    #     tags:
    #       Env: provision
    #     filters:
    #       "Name": "startswith:tomcat"
    #   loop: '{{ ec2.instances }}'


     # - name: Create a soft link to start and stop Tomcat
    #   become: yes
    #   file:
    #     src: /opt/tomcat9/bin/startup.sh
    #     dest: /usr/bin/starttomcat
    #     state: link      

    # - name: Create a soft link to stop Tomcat
    #   become: yes
    #   file:
    #     src: /opt/tomcat9/bin/shutdown.sh
    #     dest: /usr/bin/stoptomcat
    #     state: link
